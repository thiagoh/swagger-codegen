/**
 * @fileoverview AUTOMATICALLY GENERATED service for {{package}}.{{classname}}.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.{{#appDescription}}
 *
 * {{ appDescription }}{{/appDescription}}{{#version}}
 * Version: {{version}}{{/version}}{{#appContact}}
 * Contact: {{appContact}}{{/appContact}}
{{^hideGenerationTimestamp}}
 * Generated at: {{generatedDate}}
{{/hideGenerationTimestamp}}
 * Generated by: {{generatorClass}}
 */{{#licenseInfo}}
/**
 * @license {{licenseInfo}}{{#licenseUrl}}
 * {{licenseUrl}}{{/licenseUrl}}
 */
{{/licenseInfo}}
(function() {

	'use strict';
	
	define(['app', 'angular', 'underscore'], function(app, angular, _) {
	
		{{#imports}}
		{{/imports}}
		
		/**
		{{#description}}
		 * {{&description}}
		{{/description}}
		 * @constructor
		 * @param {!angular.$http} $http
		 * @param {!Object} $httpParamSerializer
		 * @param {!angular.$injector} $injector
		 * @struct
		 */
		 
		{{#operations}}			                   
		
		app.service('{{classname}}', ['$http', '$httpParamSerializer', '$injector', 'httpService',  
			function($http, $httpParamSerializer, $injector, httpService) {
		
				var defaultHeaders = $injector.has('{{classname}}DefaultHeaders') ? ($injector.get('{{classname}}DefaultHeaders')) : {};
				var basePath = $injector.has('{{classname}}BasePath') ? ($injector.get('{{classname}}BasePath')) : '{{basePathWithoutHost}}';
				
				{{#operation}}
		
				/**
				 * {{summary}}
				 * {{notes}}{{#allParams}}
				 * @param {!{{{dataType}}}{{^required}}={{/required}}} {{^required}}opt_{{/required}}{{paramName}} {{description}}{{/allParams}}
				 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
				 * @return {!angular.$q.Promise{{#returnType}}<!{{{returnType}}}>{{/returnType}}}
				 */
				this.{{nickname}} = function {{nickname}}({{#allParams}}{{^required}}opt_{{/required}}{{paramName}}, {{/allParams}}opt_extraHttpRequestParams) {
				
				  var path = basePath + '{{path}}'{{#pathParams}}
				  				.replace('{' + '{{baseName}}' + '}', String({{^required}}opt_{{/required}}{{paramName}})){{/pathParams}};
				
				  var queryParameters = {};
				
				  var headerParams = angular.extend({}, defaultHeaders);
				{{#hasFormParams}}
				  var formParams = {};
				
				{{/hasFormParams}}
				{{#allParams}}
				{{#required}}
				  // verify required parameter '{{^required}}opt_{{/required}}{{paramName}}' is set
				  if (!{{^required}}opt_{{/required}}{{paramName}}) {
				    throw new Error('Parameter {{^required}}opt_{{/required}}{{paramName}} is required');
				  }
				{{/required}}
				{{/allParams}}
				{{#queryParams}}
				  if ({{^required}}opt_{{/required}}{{paramName}} !== undefined) {
				    queryParameters['{{baseName}}'] = {{^required}}opt_{{/required}}{{paramName}};
				  }
				
				{{/queryParams}}
				{{#headerParams}}
				  headerParams['{{baseName}}'] = {{^required}}opt_{{/required}}{{paramName}};
				
				{{/headerParams}}
				{{#hasFormParams}}
				  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
				
				{{/hasFormParams}}
				{{#formParams}}
				  formParams['{{baseName}}'] = {{^required}}opt_{{/required}}{{paramName}};
				
				{{/formParams}}
				  var httpRequestParams = {
				    method: '{{httpMethod}}',
				    url: path,
				    json: {{#hasFormParams}}false{{/hasFormParams}}{{^hasFormParams}}true{{/hasFormParams}},
				    {{#bodyParam}}data: {{^required}}opt_{{/required}}{{paramName}},
				    {{/bodyParam}}
				    {{#hasFormParams}}data: this.httpParamSerializer(formParams),
				    {{/hasFormParams}}
				    params: queryParameters,
				    headers: headerParams
				  };
				
				  if (opt_extraHttpRequestParams) {
				    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
				  }
				
				  return httpService(httpRequestParams);
				};
				{{/operation}}
			
			}]);
		
		{{/operations}}
	});
	 
}());